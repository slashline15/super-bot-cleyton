# handlers/telegram_llm_handler.py
from telegram import Update
from telegram.ext import Application, ContextTypes
from telegram.constants import ChatAction
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, CallbackQueryHandler, CommandHandler, MessageHandler, filters, CallbackQueryHandler
from src.bot.utils.config_manager import ConfigManager, EDITABLE_CONFIGS
from src.bot.agents.llm_agent import LLMAgent
from src.bot.utils.audio_utils import transcribe_audio  # mantenha s√≥ o que realmente √© de √°udio
from src.bot.utils.cnpj import busca_CNPJ, format_cnpj_info, CNPJError, validar_cnpj, escape_markdown # import das fun√ß√µes de CNPJ
from src.bot.utils.token_tracker import TokenTracker
import logging
import asyncio
import os
import json
import datetime
from src.bot.memory.format_utils import format_context_for_provider

logger = logging.getLogger('TelegramLLMHandler')

# Estados para o ConversationHandler
ESPERANDO_CNPJ = 0

# Estados para a conversa de configura√ß√£o
CONFIG_SELECT, CONFIG_EDIT = range(2)

class TelegramLLMHandler:
    def __init__(self):
        self.llm_agent = LLMAgent()
        # Guarda config de debug por usu√°rio
        self.debug_users = {}
        logger.info("TelegramLLMHandler inicializado")

    async def handle_memoria(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Processa o comando /memoria com visualiza√ß√£o melhorada de categorias"""
        try:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            
            # Busca estat√≠sticas de mem√≥ria diretamente do memory_manager
            memory_stats = await self.llm_agent.get_memory_stats(user_id, chat_id)
            categories = memory_stats.get("categories", [])
            total_messages = memory_stats.get("total_messages", 0)
            
            # Agrupa por import√¢ncia
            high_importance = []
            medium_importance = []
            low_importance = []
            
            # Organiza as categorias por import√¢ncia
            for cat in categories:
                if not isinstance(cat, dict):  # Skip if not a dictionary
                    continue
                    
                category = cat.get("category", "desconhecida")
                count = cat.get("total", 0)
                importance = cat.get("avg_importance", 0)
                last_message = cat.get("last_message", "desconhecida")
                
                cat_info = f"{category} ({count} msgs)"
                
                if importance >= 4:
                    high_importance.append(cat_info)
                elif importance >= 3:
                    medium_importance.append(cat_info)
                else:
                    low_importance.append(cat_info)
            
            # Monta resposta
            response = f"üß† *Mem√≥ria do Assistente*\n\n"
            response += f"üî¢ Total de mensagens: {total_messages}\n\n"
            
            if high_importance:
                response += "‚≠ê *Alta Import√¢ncia:*\n"
                response += "\n".join([f"  ‚Ä¢ {cat}" for cat in high_importance]) + "\n\n"
                
            if medium_importance:
                response += "üìù *M√©dia Import√¢ncia:*\n"
                response += "\n".join([f"  ‚Ä¢ {cat}" for cat in medium_importance]) + "\n\n"
                
            if low_importance:
                response += "üìå *Baixa Import√¢ncia:*\n"
                response += "\n".join([f"  ‚Ä¢ {cat}" for cat in low_importance]) + "\n\n"
            
            response += "\nDica: Para buscar informa√ß√µes espec√≠ficas, pergunte diretamente sobre o assunto."
                
            # Enviar com markdown
            # Procura onde t√° o problema - caracteres especiais nos nomes das categorias
            response = response.replace('*', '').replace('_', '')  # Remove caracteres markdown problem√°ticos
            # Ou simplesmente desative o markdown:
            # await update.message.reply_text(response, parse_mode=None)
            await update.message.reply_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Erro ao processar comando /memoria: {e}", exc_info=True)
            await update.message.reply_text("Erro ao buscar estat√≠sticas. Tente novamente!")
            
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Processa mensagens de texto e √°udio do Telegram"""
        try:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            processing_message = None
            
            if update.message.text:
                # Processa mensagem de texto
                user_message = update.message.text
                logger.info(f"Recebendo mensagem. User ID: {user_id}, Chat ID: {chat_id}")
                logger.info(f"Conte√∫do: {user_message[:50]}...")
                
            elif update.message.voice:
                # Processa mensagem de voz
                logger.info("Mensagem de voz recebida, iniciando transcri√ß√£o...")
                processing_message = await update.message.reply_text("üé§ Processando seu √°udio...")
                
                voice = update.message.voice
                audio_file = await voice.get_file()
                
                # Baixa o arquivo de √°udio
                audio_path = f"temp_audio_{user_id}.ogg"
                await audio_file.download_to_drive(audio_path)
                
                # Transcreve o √°udio
                user_message = await transcribe_audio(audio_path)
                logger.info(f"√Åudio transcrito: {user_message[:50]}...")
                
                # Remove o arquivo tempor√°rio
                import os
                os.remove(audio_path)
                
            else:
                await update.message.reply_text("Desculpe, s√≥ processo mensagens de texto e √°udio.")
                return
            
            # Processa a mensagem com o LLM
            logger.info("Iniciando processamento com LLM...")
            await update.message.chat.send_action(action=ChatAction.TYPING)
            response = await self.llm_agent.process_message(
                text=user_message,
                user_id=user_id,
                chat_id=chat_id
            )
            logger.info("Processamento LLM conclu√≠do")
            
            # Apaga a mensagem de processamento, se existir
            if processing_message:
                await processing_message.delete()
            
            # Envia a resposta
            await update.message.reply_text(response)
            
        except Exception as e:
            logger.error(f"Erro detalhado: {str(e)}", exc_info=True)
            
            # Apaga a mensagem de processamento em caso de erro
            if 'processing_message' in locals() and processing_message:
                try:
                    await processing_message.delete()
                except:
                    pass
                    
            # MOVIDO PRA DENTRO DO EXCEPT (antes estava fora)
            await update.message.reply_text("Desculpe, ocorreu um erro ao processar sua mensagem. O GPT o3 √© FODAAA.")
            
    async def handle_lembrar(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Processa o comando /lembrar [t√≥pico]"""
        try:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id
            
            # Extrai o t√≥pico da mensagem
            message_text = update.message.text
            topic = message_text.replace('/lembrar', '').strip()
            
            if not topic:
                await update.message.reply_text("üß† Por favor, especifique um t√≥pico para eu lembrar.\nExemplo: /lembrar projeto XYZ")
                return
                
            # Avisa que est√° buscando
            processing_msg = await update.message.reply_text(f"üîç Buscando mem√≥rias sobre: {topic}...")
            
            # Busca no sistema de mem√≥ria
            relevant_memories = await self.llm_agent.memory.get_relevant_context(
                query=topic,
                user_id=user_id,
                chat_id=chat_id,
                limit=5,
                time_window=365 * 24 * 60  # Um ano inteiro
            )
            
            if not relevant_memories:
                await processing_msg.edit_text(f"ü§î N√£o encontrei mem√≥rias espec√≠ficas sobre '{topic}'.")
                return
                
            # Gera um resumo usando o LLM
            memories_text = "\n\n".join([f"{mem['role']}: {mem['content']}" for mem in relevant_memories])
            
            summary_prompt = f"""
            Estas s√£o mem√≥rias recuperadas sobre o t√≥pico '{topic}':
            
            {memories_text}
            
            Por favor, resuma o que sabemos sobre este t√≥pico de forma concisa e natural.
            Inclua detalhes espec√≠ficos, datas, n√∫meros e outras informa√ß√µes concretas que foram mencionadas.
            Se houver diverg√™ncias ou evolu√ß√£o do assunto ao longo do tempo, indique isso.
            """
            
            # Gera o resumo
            summary_response_text = await self.llm_agent._client.chat([
                {"role": "system", "content": "Voc√™ √© um assistente que resume mem√≥rias sobre t√≥picos espec√≠ficos."},
                {"role": "user", "content": summary_prompt}
            ])
            
            summary = summary_response_text
            
            # Formata a resposta final
            response = f"üß† **Mem√≥rias sobre '{topic}'**\n\n{summary}"
            
            # Envia o resumo
            await processing_msg.edit_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Erro ao processar comando /lembrar: {e}", exc_info=True)
            await update.message.reply_text("Erro ao buscar mem√≥rias. Tente novamente!")
            
    async def handle_debug(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Liga/desliga o modo debug"""
        user_id = update.effective_user.id
        args = context.args

        if not args:
            # Sem argumento mostra estado atual
            is_debug = self.debug_users.get(user_id, False)
            await update.message.reply_text(
                f"üõ† Modo debug est√° {'ATIVADO ‚úÖ' if is_debug else 'DESATIVADO ‚ùå'}\n"
                f"Use /debug on para ativar ou /debug off para desativar."
            )
            return

        command = args[0].lower()
        if command == "on":
            self.debug_users[user_id] = True
            await update.message.reply_text("üõ† Modo debug ATIVADO! Vou mostrar logs detalhados durante o processamento.")
        elif command == "off":
            self.debug_users[user_id] = False
            await update.message.reply_text("üõ† Modo debug DESATIVADO! Logs suprimidos.")
        else:
            await update.message.reply_text("üõ† Uso: /debug on para ativar ou /debug off para desativar.")

    async def handle_debug_context(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Analisa e salva informa√ß√µes sobre o contexto atual enviado ao LLM"""
        try:
            user_id = update.effective_user.id
            chat_id = update.effective_chat.id

            # Mensagem opcional a ser usada como consulta
            # (usa argumentos do comando ou "test query" como padr√£o)
            query = " ".join(context.args) if context.args else "Esse √© um teste de contexto. Por favor, analise meu contexto."

            # Avisa o usu√°rio que estamos processando
            processing_msg = await update.message.reply_text("üîç Analisando contexto...")

            # 1. Pega contexto do MemoryManager (como no processo normal)
            raw_ctx = await self.llm_agent.memory.get_context_messages(user_id, chat_id, query=query)

            # 2. Formata para o provedor atual
            messages = format_context_for_provider(
                ctx_messages=raw_ctx,
                provider=self.llm_agent._client.provider,
                system_prompt=self.llm_agent.system_prompt,
                user_message=query
            )

            # 3. Analisa os tokens
            token_counts = []
            total_tokens = 0

            # Conta tokens por mensagem
            for i, msg in enumerate(messages):
                content = msg.get("content", "")
                if not content and "parts" in msg:
                    # Para o Gemini, extrai o conte√∫do da estrutura "parts"
                    parts = msg.get("parts", [])
                    content = parts[0].get("text", "") if parts else ""

                tokens = self.llm_agent.count_tokens(content)
                total_tokens += tokens

                role = msg.get("role", "unknown")
                token_counts.append({
                    "index": i,
                    "role": role,
                    "tokens": tokens,
                    "content_preview": content[:100] + "..." if len(content) > 100 else content
                })

            # 4. Prepara resposta para o usu√°rio
            provider = self.llm_agent._client.provider
            model = self.llm_agent._client.name

            summary = f"üìä **An√°lise de Contexto** (Provedor: {provider}, Modelo: {model})\n\n"
            summary += f"üìã **Total de mensagens**: {len(messages)}\n"
            summary += f"üî¢ **Total de tokens**: {total_tokens}\n\n"

            # Adiciona detalhes por tipo de mensagem
            system_count = sum(1 for m in messages if m.get("role") == "system")
            user_count = sum(1 for m in messages if m.get("role") == "user" or m.get("role") == "human")
            assistant_count = sum(1 for m in messages if m.get("role") == "assistant" or m.get("role") == "model")

            summary += f"ü§ñ **Mensagens system**: {system_count}\n"
            summary += f"üë§ **Mensagens usu√°rio**: {user_count}\n"
            summary += f"üí¨ **Mensagens assistente**: {assistant_count}\n\n"

            # 5. Salva o arquivo de debug
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            debug_dir = os.path.join("data", "debug")
            os.makedirs(debug_dir, exist_ok=True)

            debug_file = os.path.join(debug_dir, f"context_debug_{user_id}_{timestamp}.json")

            debug_data = {
                "metadata": {
                    "user_id": user_id,
                    "chat_id": chat_id,
                    "timestamp": timestamp,
                    "provider": provider,
                    "model": model,
                    "query": query
                },
                "stats": {
                    "total_messages": len(messages),
                    "total_tokens": total_tokens,
                    "system_count": system_count,
                    "user_count": user_count,
                    "assistant_count": assistant_count
                },
                "token_analysis": token_counts,
                "raw_context": [
                    {"role": msg.get("role", "unknown"),
                     "content": msg.get("content", "")
                      if "content" in msg else (
                        msg.get("parts", [{}])[0].get("text", "")
                        if "parts" in msg and msg.get("parts") else ""
                      )}
                    for msg in messages
                ],
                "full_messages": messages
            }

            with open(debug_file, 'w', encoding='utf-8') as f:
                json.dump(debug_data, f, ensure_ascii=False, indent=2)

            # 6. Atualiza a resposta para o usu√°rio
            summary += f"üìÅ Arquivo de debug salvo em: `{debug_file}`\n\n"
            summary += "‚ùì Para ver mais detalhes, analise o arquivo JSON que cont√©m:\n"
            summary += "- Contexto completo recuperado\n"
            summary += "- An√°lise detalhada de tokens\n"
            summary += "- Mensagens exatas enviadas ao LLM\n"

            await processing_msg.edit_text(summary, parse_mode='Markdown')

        except Exception as e:
            logger.error(f"Erro ao analisar contexto: {e}", exc_info=True)
            await update.message.reply_text(f"‚ùå Erro ao analisar contexto: {str(e)}")
    
    async def handle_logs(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Envia um resumo dos logs da sess√£o atual."""
        try:
            from src.bot.utils.log_config import export_log_summary
            
            # Avisa que est√° gerando o resumo
            processing_msg = await update.message.reply_text("üìä Gerando resumo de logs...")
            
            # Exporta o resumo
            log_file = export_log_summary()
            
            # Envia o arquivo
            with open(log_file, 'rb') as file:
                await context.bot.send_document(
                    chat_id=update.effective_chat.id,
                    document=file,
                    filename=os.path.basename(log_file),
                    caption="üìù Resumo dos logs da sess√£o atual"
                )
            
            # Atualiza a mensagem
            await processing_msg.edit_text("‚úÖ Logs enviados com sucesso!")
            
        except Exception as e:
            logger.error(f"Erro ao enviar logs: {e}", exc_info=True)
            await update.message.reply_text("‚ùå Erro ao gerar resumo de logs.")

    async def handle_usage(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Mostra estat√≠sticas de uso de tokens"""
        try:
            tracker = TokenTracker()
            daily_stats = tracker.get_daily_stats()
            session_stats = tracker.get_session_stats()
            
            # Formata valores monet√°rios
            daily_cost = f"${daily_stats['total_cost']:.4f}"
            session_cost = f"${session_stats['cost']:.4f}"
            
            # Monta resposta
            response = "üìä *Estat√≠sticas de Uso*\n\n"
            
            # Sess√£o atual
            response += "*Sess√£o Atual:*\n"
            response += f"‚Ä¢ Tokens: {session_stats['total_tokens']:,}\n"
            response += f"‚Ä¢ Custo: {session_cost}\n"
            response += f"‚Ä¢ Mensagens: {session_stats['requests']}\n\n"
            
            # Uso di√°rio
            response += "*Uso Di√°rio:*\n"
            response += f"‚Ä¢ Tokens totais: {daily_stats['total_tokens']:,}\n"
            response += f"‚Ä¢ Tokens de entrada: {daily_stats['input_tokens']:,}\n"
            response += f"‚Ä¢ Tokens de sa√≠da: {daily_stats['output_tokens']:,}\n"
            response += f"‚Ä¢ Custo total: {daily_cost}\n\n"
            
            # Uso por provedor
            response += "*Uso por Provedor:*\n"
            for provider, data in daily_stats["providers"].items():
                provider_cost = f"${data['total_cost']:.4f}"
                provider_tokens = data["total_tokens"]["input"] + data["total_tokens"]["output"]
                response += f"‚Ä¢ {provider.upper()}: {provider_tokens:,} tokens, {provider_cost}\n"
            
            await update.message.reply_text(response, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"Erro ao exibir estat√≠sticas de uso: {e}")
            await update.message.reply_text("‚ùå Ocorreu um erro ao buscar estat√≠sticas.")

    async def handle_config(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Manipula o comando /config para gerenciar configura√ß√µes"""
        config_manager = ConfigManager()
        current_configs = config_manager.get_all()
        
        # Cria um teclado inline com as op√ß√µes de configura√ß√£o
        keyboard = []
        for key, value in current_configs.items():
            # Formata o valor para exibi√ß√£o
            if key == "custom_prompt" and value:
                display_value = f"{value[:20]}..." if len(value) > 20 else value
            else:
                display_value = str(value)
                
            keyboard.append([InlineKeyboardButton(
                f"{key}: {display_value}",
                callback_data=f"config_{key}"
            )])
        
        # Adiciona bot√£o para redefinir tudo
        keyboard.append([InlineKeyboardButton("üîÑ Reset All", callback_data="config_reset_all")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            "üîß *Configura√ß√µes do Bot*\n\n"
            "Clique em uma op√ß√£o para edit√°-la:",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
        return CONFIG_SELECT

    async def config_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Processa bot√µes do menu de configura√ß√£o"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        config_manager = ConfigManager()
        
        if data == "config_reset_all":
            # Reseta todas as configura√ß√µes
            config_manager.reset()
            await query.edit_message_text(
                "‚úÖ Todas as configura√ß√µes foram redefinidas para valores padr√£o.",
                parse_mode='Markdown'
            )
            return ConversationHandler.END
        
        # Extrai a chave de configura√ß√£o
        config_key = data.replace("config_", "")
        
        if config_key in EDITABLE_CONFIGS:
            # Prepara para editar esta configura√ß√£o
            config_def = EDITABLE_CONFIGS[config_key]
            current_value = config_manager.get(config_key)
            
            # Texto de instru√ß√£o baseado no tipo
            instruction_text = ""
            if config_def["type"] == "select":
                options = config_def["options"]
                keyboard = []
                for option in options:
                    keyboard.append([InlineKeyboardButton(
                        f"{'‚úì ' if option == current_value else ''}{option}",
                        callback_data=f"set_{config_key}_{option}"
                    )])
                keyboard.append([InlineKeyboardButton("üîô Voltar", callback_data="config_back")])
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"üîß *Editar {config_key}*\n\n"
                    f"*Descri√ß√£o:* {config_def['description']}\n"
                    f"*Valor atual:* `{current_value}`\n\n"
                    f"Selecione uma op√ß√£o:",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                return CONFIG_EDIT
            
            elif config_def["type"] == "bool":
                # Para boolean, oferecemos bot√µes Sim/N√£o
                keyboard = [
                    [
                        InlineKeyboardButton("‚úì Sim", callback_data=f"set_{config_key}_true"),
                        InlineKeyboardButton("‚ùå N√£o", callback_data=f"set_{config_key}_false")
                    ],
                    [InlineKeyboardButton("üîô Voltar", callback_data="config_back")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
                
                await query.edit_message_text(
                    f"üîß *Editar {config_key}*\n\n"
                    f"*Descri√ß√£o:* {config_def['description']}\n"
                    f"*Valor atual:* `{current_value}`\n\n"
                    f"Selecione uma op√ß√£o:",
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )
                return CONFIG_EDIT
            
            else:
                # Para outros tipos, pedimos entrada de texto
                instruction_text = f"Digite o novo valor para *{config_key}*:\n\n"
                
                if config_def["type"] == "float":
                    min_val = config_def.get("min", "-‚àû")
                    max_val = config_def.get("max", "‚àû")
                    instruction_text += f"*Tipo:* N√∫mero decimal entre {min_val} e {max_val}\n"
                
                elif config_def["type"] == "int":
                    min_val = config_def.get("min", "-‚àû")
                    max_val = config_def.get("max", "‚àû")
                    instruction_text += f"*Tipo:* N√∫mero inteiro entre {min_val} e {max_val}\n"
                
                elif config_def.get("multiline", False):
                    instruction_text += "*Tipo:* Texto (m√∫ltiplas linhas permitidas)\n"
                
                else:
                    instruction_text += "*Tipo:* Texto\n"
                
                instruction_text += f"\n*Valor atual:* `{current_value}`\n\n"
                instruction_text += "Responda com o novo valor ou /cancel para cancelar."
                
                # Salva a configura√ß√£o sendo editada no contexto
                context.user_data["editing_config"] = config_key
                
                await query.edit_message_text(
                    instruction_text,
                    parse_mode='Markdown'
                )
                return CONFIG_EDIT
        
        elif config_key == "back":
            # Volta para o menu principal
            await self.handle_config(update, context)
            return CONFIG_SELECT
        
        return ConversationHandler.END

    async def config_set_value(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Processa valores digitados pelo usu√°rio"""
        if "editing_config" not in context.user_data:
            await update.message.reply_text("‚ùå Erro: nenhuma configura√ß√£o sendo editada.")
            return ConversationHandler.END
        
        config_key = context.user_data["editing_config"]
        new_value = update.message.text
        
        # Verifica se o usu√°rio cancelou
        if new_value.lower() == "/cancel":
            await update.message.reply_text("üîÑ Edi√ß√£o cancelada.")
            return ConversationHandler.END
        
        # Tenta definir o novo valor
        config_manager = ConfigManager()
        if config_manager.set(config_key, new_value):
            await update.message.reply_text(
                f"‚úÖ Configura√ß√£o *{config_key}* atualizada para *{new_value}*.",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                f"‚ùå Valor inv√°lido para *{config_key}*. Tente novamente ou use /cancel.",
                parse_mode='Markdown'
            )
            return CONFIG_EDIT
        
        return ConversationHandler.END

    async def config_callback_set(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Processa callbacks de bot√µes para definir valores"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        if data.startswith("set_"):
            # Formato: set_config_key_value
            parts = data.split("_", 2)
            if len(parts) >= 3:
                config_key = parts[1]
                config_value = parts[2]
                
                # Casos especiais para boolean
                if config_value == "true":
                    config_value = True
                elif config_value == "false":
                    config_value = False
                
                # Tenta definir o valor
                config_manager = ConfigManager()
                if config_manager.set(config_key, config_value):
                    await query.edit_message_text(
                        f"‚úÖ Configura√ß√£o *{config_key}* atualizada para *{config_value}*.",
                        parse_mode='Markdown'
                    )
                else:
                    await query.edit_message_text(
                        f"‚ùå Erro ao definir *{config_key}*.",
                        parse_mode='Markdown'
                    )
        
        return ConversationHandler.END

def setup_config_handlers(application):
        """Configura os handlers para o comando de configura√ß√£o"""
        handler = ConversationHandler(
            entry_points=[CommandHandler("config", telegram_llm_handler.handle_config)],
            states={
                CONFIG_SELECT: [
                    CallbackQueryHandler(telegram_llm_handler.config_button, pattern=r'^config_')
                ],
                CONFIG_EDIT: [
                    CallbackQueryHandler(telegram_llm_handler.config_callback_set, pattern=r'^set_'),
                    CallbackQueryHandler(telegram_llm_handler.config_button, pattern=r'^config_'),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, telegram_llm_handler.config_set_value)
                ]
            },
            fallbacks=[CommandHandler("cancel", lambda u, c: ConversationHandler.END)]
        )
        application.add_handler(handler)
#---------------------------------------------------------------
# CNPJ
#---------------------------------------------------------------

async def cnpj_comando(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Manipula o comando /cnpj."""
    args = context.args
    
    # Se o usu√°rio j√° forneceu o CNPJ como argumento (/cnpj 12345678901234)
    if args and len(args) > 0:
        cnpj_texto = args[0]
        await processar_cnpj(update, context, cnpj_texto)
        return ConversationHandler.END
    
    # Se o usu√°rio apenas digitou /cnpj sem argumentos
    await update.message.reply_text(
        "Por favor, digite o CNPJ que deseja consultar (s√≥ os n√∫meros ou com pontua√ß√£o):"
    )
    return ESPERANDO_CNPJ

async def receber_cnpj(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """Recebe o CNPJ enviado pelo usu√°rio ap√≥s o pedido."""
    cnpj_texto = update.message.text
    await processar_cnpj(update, context, cnpj_texto)
    return ConversationHandler.END

async def processar_cnpj(update: Update, context: ContextTypes.DEFAULT_TYPE, cnpj_texto: str) -> None:
    """Processa o CNPJ fornecido, faz a consulta e envia a resposta."""
    message = update.effective_message
    
    # Mostra "digitando..." enquanto processa
    await context.bot.send_chat_action(
        chat_id=update.effective_chat.id, 
        action="typing"
    )
    
    try:
        # Valida o CNPJ antes de fazer a consulta
        cnpj_limpo = validar_cnpj(cnpj_texto)
        
        # Faz a busca
        dados = busca_CNPJ(cnpj_limpo)
        
        # Formatar para o Telegram (modifiquei o formato HTML para funcionar bem no Telegram)
        texto = format_cnpj_info(dados, formato="markdown")
        
        # Bot√µes para outros formatos
        keyboard = [
            [
                InlineKeyboardButton("üìÑ Texto Simples", callback_data=f"cnpj_formato_{cnpj_limpo}_text"),
                InlineKeyboardButton("üîç Detalhes", callback_data=f"cnpj_detalhe_{cnpj_limpo}"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        # Escapa caracteres especiais para MarkdownV2
        texto_escapado = escape_markdown(texto)
        
        await message.reply_text(
            text=texto_escapado,
            reply_markup=reply_markup,
            parse_mode='MarkdownV2'  # Importante para o Telegram interpretar a formata√ß√£o markdown
        )
        
    except CNPJError as e:
        await message.reply_text(f"‚ùå Erro: {str(e)}")
    except Exception as e:
        await message.reply_text(f"‚ùå Erro inesperado: {str(e)}")

async def botao_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Responde aos cliques de bot√£o para mudar formato ou mostrar detalhes."""
    query = update.callback_query
    await query.answer()
    
    # Exemplo: cnpj_formato_43836352000194_text
    dados = query.data.split('_')
    
    if len(dados) < 4:
        return
    
    tipo = dados[1]  # formato ou detalhe
    cnpj = dados[2]  # o CNPJ
    
    try:
        if tipo == "formato":
            formato = dados[3]  # text, html, etc
            resultado = busca_CNPJ(cnpj)
            texto = format_cnpj_info(resultado, formato=formato)
            
            # Para texto, n√£o usamos parse_mode
            if formato == "text":
                await query.edit_message_text(
                    text=texto,
                    reply_markup=query.message.reply_markup
                )
            else:
                await query.edit_message_text(
                    text=texto,
                    reply_markup=query.message.reply_markup,
                    parse_mode='MarkdownV2'
                )
                
        elif tipo == "detalhe":
            # Busca dados extras ou mostra informa√ß√µes espec√≠ficas
            await query.message.reply_text(
                "üîç *Detalhes adicionais*\n\n"
                "Para exportar os dados completos em outros formatos, use os comandos:\n"
                f"`/cnpj_html {cnpj}`\n"
                f"`/cnpj_json {cnpj}`",
                parse_mode='MarkdownV2'
            )
    except Exception as e:
        await query.edit_message_text(
            text=f"‚ùå Erro ao processar sua solicita√ß√£o: {str(e)}",
            reply_markup=query.message.reply_markup
        )

# Fun√ß√µes adicionais para exporta√ß√£o em outros formatos (opcional)
async def cnpj_html(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Envia os dados do CNPJ no formato HTML como arquivo."""
    args = context.args
    
    if not args or len(args) == 0:
        await update.message.reply_text("Use /cnpj_html seguido do n√∫mero do CNPJ")
        return
    
    try:
        cnpj = validar_cnpj(args[0])
        dados = busca_CNPJ(cnpj)
        html = format_cnpj_info(dados, formato="html")
        
        # Criar arquivo tempor√°rio
        import tempfile
        temp = tempfile.NamedTemporaryFile(delete=False, suffix='.html', mode='w', encoding='utf-8')
        temp.write(html)
        temp.close()
        
        # Enviar o arquivo
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=open(temp.name, 'rb'),
            filename=f"cnpj_{cnpj}.html",
            caption=f"Dados do CNPJ {cnpj} em formato HTML"
        )
        
        # Limpar
        import os
        os.unlink(temp.name)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå Erro: {str(e)}")

async def cnpj_json(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """Envia os dados do CNPJ no formato JSON como arquivo."""
    args = context.args
    
    if not args or len(args) == 0:
        await update.message.reply_text("Use /cnpj_json seguido do n√∫mero do CNPJ")
        return
    
    try:
        cnpj = validar_cnpj(args[0])
        dados = busca_CNPJ(cnpj)
        json_str = format_cnpj_info(dados, formato="json")
        
        # Criar arquivo tempor√°rio
        import tempfile
        temp = tempfile.NamedTemporaryFile(delete=False, suffix='.json', mode='w', encoding='utf-8')
        temp.write(json_str)
        temp.close()
        
        # Enviar o arquivo
        await context.bot.send_document(
            chat_id=update.effective_chat.id,
            document=open(temp.name, 'rb'),
            filename=f"cnpj_{cnpj}.json",
            caption=f"Dados do CNPJ {cnpj} em formato JSON"
        )
        
        # Limpar
        import os
        os.unlink(temp.name)
        
    except Exception as e:
        await update.message.reply_text(f"‚ùå Erro: {str(e)}")

# Para registrar no bot:
def registrar_cnpj_handlers(application: Application) -> None:
    """Registra os handlers relacionados ao CNPJ."""
    
    # Handler para conversa quando usu√°rio digita apenas /cnpj
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("cnpj", cnpj_comando)],
        states={
            ESPERANDO_CNPJ: [MessageHandler(filters.TEXT & ~filters.COMMAND, receber_cnpj)],
        },
        fallbacks=[],
    )
    
    application.add_handler(conv_handler)
    
    # Handler para os bot√µes de callback
    application.add_handler(CallbackQueryHandler(botao_callback, pattern="^cnpj_"))
    
    # Handlers para comandos de exporta√ß√£o
    application.add_handler(CommandHandler("cnpj_html", cnpj_html))
    application.add_handler(CommandHandler("cnpj_json", cnpj_json))






#---------------------------------------------------------------
telegram_llm_handler = TelegramLLMHandler()
# wm testes