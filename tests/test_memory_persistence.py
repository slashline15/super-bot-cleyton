# python -m tests.test_memory_persistence
import sys
import os
from pathlib import Path
import asyncio
import uuid

# Adiciona o diret√≥rio raiz ao PATH
sys.path.append(str(Path(__file__).parent.parent))

from src.bot.memory.memory_manager import MemoryManager

async def test_persistence():
    """Testa se os dados est√£o persistindo no ChromaDB"""
    try:
        # Usa um identificador √∫nico para o teste
        test_id = str(uuid.uuid4())
        
        # Cria um conte√∫do de teste √∫nico
        test_content = f"Mensagem de teste para persist√™ncia: {test_id}"
        print(f"\nUsando conte√∫do de teste: {test_content}")
        
        # Inicializa o MemoryManager com o diret√≥rio padr√£o
        print("\n1. Inicializando MemoryManager...")
        memory = MemoryManager()
        
        # Adiciona uma mensagem
        print("\n2. Adicionando mensagem de teste...")
        await memory.add_message(
            user_id=12345,
            chat_id=67890,
            content=test_content,
            role="user"
        )
        print("‚úì Mensagem adicionada")
        
        # Reinicializa o MemoryManager para simular rein√≠cio do bot
        print("\n3. Reinicializando MemoryManager para simular rein√≠cio...")
        memory = MemoryManager()
        
        # Busca a mensagem usando o conte√∫do exato
        print("\n4. Buscando mensagem ap√≥s reinicializa√ß√£o...")
        results = await memory.get_relevant_context(
            query=test_id,  # Usamos parte do ID para busca
            user_id=12345,
            chat_id=67890,
            limit=5
        )
        
        # Verifica se encontrou a mensagem
        if results and any(test_id in result.get('content', '') for result in results):
            print("‚úÖ SUCESSO: Mensagem persistiu ap√≥s reinicializa√ß√£o!")
            for result in results:
                print(f"- Conte√∫do: {result.get('content', '')[:50]}...")
            return True
        else:
            print("‚ùå FALHA: Mensagem n√£o persistiu ap√≥s reinicializa√ß√£o")
            print(f"Resultados encontrados: {len(results) if results else 0}")
            return False
            
    except Exception as e:
        print(f"‚ùå ERRO: {str(e)}")
        return False
        
if __name__ == "__main__":
    print("üß™ Teste de Persist√™ncia do ChromaDB")
    result = asyncio.run(test_persistence())
    
    if not result:
        print("\n‚ö†Ô∏è O ChromaDB n√£o est√° persistindo dados corretamente!")
        print("Poss√≠veis causas:")
        print("1. Diret√≥rio de persist√™ncia incorreto")
        print("2. Permiss√µes de escrita no diret√≥rio")
        print("3. Problemas na inicializa√ß√£o do ChromaDB")